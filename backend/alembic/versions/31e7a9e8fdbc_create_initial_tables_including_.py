"""Create initial tables including embeddings

Revision ID: 31e7a9e8fdbc
Revises: 
Create Date: 2025-09-13 02:38:26.701550

"""
from typing import Sequence, Union
import pgvector
import sqlmodel
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '31e7a9e8fdbc'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('forecasts')
    op.drop_table('daily_agg')
    op.add_column('events', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('events', sa.Column('longitude', sa.Float(), nullable=True))
    op.add_column('events', sa.Column('latitude', sa.Float(), nullable=True))
    op.add_column('events', sa.Column('embeddings', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True))
    op.add_column('events', sa.Column('start', sa.DateTime(timezone=True), nullable=True))
    op.add_column('events', sa.Column('end', sa.DateTime(timezone=True), nullable=True))
    op.add_column('events', sa.Column('location', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('events', sa.Column('attendance', sa.Integer(), nullable=True))
    op.add_column('events', sa.Column('spend_amount', sa.Integer(), nullable=True))
    op.add_column('events', sa.Column('predicthq_updated', sa.DateTime(timezone=True), nullable=True))
    op.add_column('events', sa.Column('created_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('events', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('events', sa.Column('related_event_ids', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.alter_column('events', 'id',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=False)
    op.alter_column('events', 'title',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               nullable=False)
    op.alter_column('events', 'category',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               nullable=False)
    op.create_index('idx_events_category_start', 'events', ['category', 'start'], unique=False)
    op.create_index('idx_events_embeddings_vector', 'events', ['embeddings'], unique=False, postgresql_using='ivfflat')
    op.create_index('idx_events_location', 'events', ['latitude', 'longitude'], unique=False)
    op.create_index(op.f('ix_events_category'), 'events', ['category'], unique=False)
    op.create_index(op.f('ix_events_title'), 'events', ['title'], unique=False)
    op.drop_column('events', 'starts_at')
    op.drop_column('events', 'country')
    op.drop_column('events', 'phq_rank')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('events', sa.Column('phq_rank', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('country', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('starts_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_events_title'), table_name='events')
    op.drop_index(op.f('ix_events_category'), table_name='events')
    op.drop_index('idx_events_location', table_name='events')
    op.drop_index('idx_events_embeddings_vector', table_name='events', postgresql_using='ivfflat')
    op.drop_index('idx_events_category_start', table_name='events')
    op.alter_column('events', 'category',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('events', 'title',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('events', 'id',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('events', 'related_event_ids')
    op.drop_column('events', 'updated_at')
    op.drop_column('events', 'created_at')
    op.drop_column('events', 'predicthq_updated')
    op.drop_column('events', 'spend_amount')
    op.drop_column('events', 'attendance')
    op.drop_column('events', 'location')
    op.drop_column('events', 'end')
    op.drop_column('events', 'start')
    op.drop_column('events', 'embeddings')
    op.drop_column('events', 'latitude')
    op.drop_column('events', 'longitude')
    op.drop_column('events', 'description')
    op.create_table('daily_agg',
    sa.Column('day', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('region_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('metric', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('day', 'region_id', 'category', 'metric', name=op.f('daily_agg_pkey'))
    )
    op.create_table('forecasts',
    sa.Column('day', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('region_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('metric', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('y_hat', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('y_lo', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('y_hi', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('model_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('day', 'region_id', 'category', 'metric', name=op.f('forecasts_pkey'))
    )
    # ### end Alembic commands ###
